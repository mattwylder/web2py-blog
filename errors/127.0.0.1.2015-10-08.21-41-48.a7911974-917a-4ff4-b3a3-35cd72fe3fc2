(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> "
p3
sS'layer'
p4
S'/home/mat/Downloads/web2py/applications/blog/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    posts = db().select(db.post.ALL);\n    return dict(posts=posts)\n\n@auth.requires_login()\ndef create():\n    form = SQLFORM(db.post)\n    if form.process().accepted:\n        response.flash = \'Your blog was posted\'\n    return dict(form=form)\n\n#@auth.requires_login()\ndef show():\n    #TODO: Allow editing/ deletion if you\'re the user who created this\n    cur_user = auth.user\n    post = db.post(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    title=post.title\n    user_id=post.user_id\n    same = cur_user.id == user_id\n    body = post.body\n    comments = db(db.post_com.post_id==post.id).select()\n\n    #TODO: autofill db.comment.post_id with post.id\n    form = SQLFORM(db.comment)\n    #db.comment default = post.id\n    if form.process().accepted:\n        response.flash = \'Comment posted\'\n    return dict(same=same, title=title, post_id=post.id, username=user_id, user_id=user_id, body=body, comments=comments, form=form)\n\ndef profile():\n    user_id = request.args(0, cast=int)\n    user = db(db.auth_user.id == user_id).select()[0];\n    #user = db().select(db.auth_user.ALL);\n    posts = db(db.post.user_id == user_id).select();\n    return dict(user_id=user_id, posts=posts)\n\n#Require specific user\n#this crashes for some reason I have no fucking clue why\n@auth.requires_login()\ndef edit():\n    post_id = request.args(0,cast=int)\n    record = db(db.post.id == post_id).select().first()\n    form = SQLFORM(db.post, record, deletable = True, delete_label=T(\'Check to delete\'))\n    if form.accepts(request.vars, session):\n        session.flash = T(\'done!\')\n    return dict(form=form)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(show)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mat/Downloads/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/mat/Downloads/web2py/applications/blog/controllers/default.py", line 102, in <module>\n  File "/home/mat/Downloads/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mat/Downloads/web2py/applications/blog/controllers/default.py", line 41, in show\n    form = SQLFORM(db.comment)\n  File "/home/mat/Downloads/web2py/gluon/packages/dal/pydal/base.py", line 906, in __getattr__\n    return super(DAL, self).__getattr__(key)\n  File "/home/mat/Downloads/web2py/gluon/packages/dal/pydal/helpers/classes.py", line 30, in __getattr__\n    raise AttributeError\nAttributeError\n'
p11
s.